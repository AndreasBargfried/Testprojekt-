 
SUB PPCSPARA()
 END SUB 

SUB main()
    'CALL Send()

 END SUB 
 

SUB WriteTo(datei$)
 'verzweigt je nach PPCS-Status und Workstation-Nummer in WriteToLoad (PPCS) oder WriteToSend (lokale Arbeit) 
    IF GFilialeNow% = - 1 THEN END SUB 
    IF jaDebug% = - 1 THEN CALL Fehler("WriteTo():",datei$)
    oldErrorLabel$ = Superbase.ErrorTrapLabel
    cfile$ = FILE 
    FILE datei$

    CALL GetFileInfo(datei$)
    typ$ = jaFileTyp$
    
    IF jaFileTyp$ = "" OR jaFileTyp$ = "I" THEN END SUB 'kein am Abgleich beteiligtes File 
        
    code$ = jaFileCode$ + "." + datei$
    'CodeServer mu· immer gesetzt werden, da hier nicht zwischen 
    'neuen und geÑnderten Daten unterschieden werden kann

    IF GPPCS$ = "TRUE" THEN 
        toLoad% = 0
        SELECT CASE jaFileTyp$

        CASE "A","C"
        
            'RecStatus-Felder setzen
            wks$ = "Workstation." + datei$
            SET INDEX code$$
            SELECT CURRENT LOCK FILE datei$ INDEX code$$
 
            recfield$ = "rec0." + datei$
            recfield$$ = wks$$
            a% = wks$$
            FOR i% = 1 TO 19
                recfield$ = "rec" + STR$ (i%,"z") + "." + datei$
                recfield$$ = wks$$' jetzt Dirty !
            NEXT i%
                
            'das eigene RecStatus-Feld als abgeglichen markieren, da ein WriteToLoad-Aufruf folgt
            recfield$ = jaRecField$ + "." + datei$
            recfield$$ = 10000000 + wks$$
 
            STORE FILE datei$
            UNLOCK CURRENT FILE datei$
 
        CASE "Z","Y"
 
            'Dirty-ZÑhler inkrementieren                
            dirty$ = "rec0." + datei$
            SET INDEX code$$
            SELECT CURRENT LOCK FILE datei$ INDEX code$$
            dirty$$ = dirty$$ + 1
            STORE FILE datei$
            UNLOCK CURRENT FILE datei$
        END CASE 
        
        IF Workstation% > 0 AND ((jaFileTyp$ = "A") OR (jaFileTyp$ = "Y") OR (jaFileTyp$ = "C")) THEN 
            IF WriteToLoad%(datei$,0) <> - 1 THEN ' die "0" : kein Un-Dirty in WriteToLoad nîtig 

            END IF 
        END IF 
   
    ELSE 'Offline 
        IF Workstation% > 0 THEN '(sis)      

            'Filiale offline ==> WriteToSend ?: nur, wenn Typ A oder Y (auch sis)
            IF jaFileTyp$ = "A" OR jaFileTyp$ = "Y" THEN 
                IF WriteToSend%(datei$) <> - 1 THEN 
                END IF 
            END IF 

        END IF 
   END IF 
 
WriteToEnde: 
    FILE cfile$
    Superbase.ErrorTrapLabel = oldErrorLabel$
 END SUB 
 '***********************************************************************************************     
 

FUNCTION WriteToSend%(datei$)
 'ÅbertrÑgt énderungen im aktuellen Datensatz von _datei$ in die zugehîrige *Send - Datei
 'RÅckgabe von -1, falls erfolgreich
 'Vorgehen:
 'Testen, ob der modifizierte/neue Datensatz schon in der Send-Datei ex.
 'wenn ja ==> Åberschreiben, sonst neu erzeugen und kopieren    
 '
 'Voraussetzung: globale Variablen mit File-Information wurden Åber GetFileInfo() gelesen
 '(das macht WriteTo())
 oldErrorLabel$ = Superbase.ErrorTrapLabel
 WriteToSend% = 0
 ON ERROR GOTO ErrorHandler
 datei$ = UCASE$ (datei$)
 IF jaDebug% = - 1 THEN CALL Fehler("WriteToSend:",datei$)
  
 'Send-Variablen 
 codefield$ = jaFileCode$ + "."
 typ$ = jaFileTyp$
 sendfile$ = jaFilePrefix$ + "Send"
 
 'werden in bzw. nach der select-Anweisung definiert 
  sendTState$ = "TSTate." + sendfile$
  localcode$ = codefield$ + datei$
  sendcode$ = codefield$ + sendfile$
  codeserver$ = "CodeServer." + sendfile$
     
  IF NOT OPEN (sendfile$) THEN CALL DFile(2,"ABGLEICH\SEND\" + sendfile$ + ";paris")

 'befindet sich der Datensatz schon in dem Send-File (sendfile$)  
 IF NOT EXISTS (localcode$$,sendcode$$) THEN 
    BLANK FILE sendfile$
    IF CopyRecord%(datei$,sendfile$) <> - 1 THEN CALL Fehler("Fehler in CopyRecord", STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))

    'damit beim Send()-Vorgang automatisch Åber CopyRecord() die Dirty-Bits
    'fÅr die anderen Pfad-Teilnehmer gesetzt werden: 
    '(die verdammte Null gesondert behandeln)
    wks$ = "Workstation." + datei$
    recfield$ = "rec0." + sendfile$
    recfield$$ = wks$$
    FOR i% = 1 TO 19
        recfield$ = "rec" + STR$ (i%,"z") + "." + sendfile$'nicht abgeglichen
        recfield$$ = wks$$
    NEXT i%
    recfield$ = jaRecField$ + "." + sendfile$'das eigene Rec-Field als abgeglichen markieren
    recfield$$ = 10000000 + wks$$
    sendTState$$ = "1"'als nicht abgeglichen markieren
    
    STORE FILE sendfile$
 ELSE 
    'Datensatz ex. bereits ==> Åberschreiben
    SELECT FIRST FILE sendfile$ INDEX sendcode$$
    SELECT KEY localcode$$ LOCK FILE sendfile$ INDEX sendcode$$
    IF sendcode$$ <> localcode$$ THEN 
        GOTO WriteToSendError
    END IF 
 
    IF CopyRecord%(datei$,sendfile$) <> - 1 THEN GOTO WriteToSendError
    wks$ = "Workstation." + datei$
    recfield$ = "rec0." + sendfile$
    recfield$$ = wks$$
    FOR i% = 1 TO 19
        recfield$ = "rec" + STR$ (i%,"z") + "." + sendfile$'nicht abgeglichen
        recfield$$ = wks$$
    NEXT i%
    recfield$ = jaRecField$ + "." + sendfile$'das eigene Rec-Field als abgeglichen markieren    
    recfield$$ = 10000000 + wks$$
    sendTState$$ = "1"'als nicht abgeglichen markieren
    STORE FILE sendfile$
    UNLOCK FILE sendfile$
 END IF 
  
 'alles io
 WriteToSend% = - 1
 GOTO WriteToSendEnde 
 
WriteToSendEnde: 
 Superbase.ErrorTrapLabel = oldErrorLabel$
 END FUNCTION 
 '***********************************************************************************************
  

FUNCTION WriteToLoad%(datei$,doUndirty%)
 

 ' öbernimmt die im PPCS-Modus geÑnderten/hinzugefÅgten Daten in die *Load - files
 ' ==> a) _datei$ ist eine Åber PPCS geîffnete Datei
 '     b) dies ist in jedem Fall ein Abgleich zur Filiale hin ... 
 '        DatensÑtze sind bereits als abgeglichen markiert,wenn 
 '        Aufruf von WriteTo aus (doUndirty% = 0)
 '    
 '  - Aufruf: von WriteTo() oder CenterToLoadEx() aus (also immer bei GPPCS$ = "TRUE")
 '  - globale Variablen mit File-Information werden vorher Åber GetFileInfo() gelesen
 '    (das machen auch WriteTo() bzw. CenterToLoadEx())

    'IF jaDebug% = - 1 THEN CALL Fehler("WriteToLoad: " + datei$,"")

    oldErrorLabel$ = Superbase.ErrorTrapLabel
    ON ERROR GOTO WriteToLoadError
    WriteToLoad% = 0
        
    LoadFile$ = jaFilePrefix$ + "Load"
    LoadIndex$ = jaFileCode$ + "." + loadfile$'der Code-Index in *Load.sbf
    CenterCode$ = jaFileCode$ + "." + datei$' 'Code-Index in Center-File
    RecIndex$ = jaRecField$ + "." + datei$'Index, der in CenterToLoadEx benutzt wird
    TStateField$ = "TState." + loadfile$
    IF doUndirty% = - 1 THEN 'Aufruf von CenterToLoadEx() ?

        '~~~~~~~~~~~~~~~~~~~~~ Protokoll nur fÅr CenterToLoadEx
        CALL AbgleichLog(CenterCode$$,0)
        '~~~~~~~~~~~~~~~~~~~~~       
         'den Datensatz im eigenen RecStatus-Feld des Center-Files als abgeglichen markieren
         a$ = CenterCode$$
         wks$ = "Workstation." + datei$
         recfield$ = jaRecField$ + "." + datei$
         SELECT CURRENT LOCK FILE datei$ INDEX recfield$$
         recfield$$ = 10000000 + wks$$
         STORE FILE datei$
         UNLOCK CURRENT FILE datei$
         SELECT CURRENT FILE datei$ INDEX CenterCode$$'Befehle davor Ñndern den Index 

    ELSE 
        
        IF Workstation% <> 0 AND jaCenterDirty% <> - 1 THEN 
          'kommt bei einer "Speichern"-Aktion beim Onlinebetrieb einer Filiale vor          
          'wenn noch nicht gesetzt ==> in ini schreiben und Variable setzen
          'bedeutet: LoadToLocal ist spÑtestens mit dem nÑchsten Programmstart nîtig
          CALL WriteConfig("PROVIS","LTL","1")
          jaCenterDirty% = - 1
        END IF 
 
    END IF 

    IF NOT OPEN (LoadFile$) THEN 
        CALL DFile(2,"\ABGLEICH\Load\" + LoadFile$ + ";paris")
        ON ERROR GOTO WriteToLoadError
    END IF 

    code$ = CenterCode$$'die Code des zu kopierenden Datensatzes im Center-file 
    IF NOT EXISTS (code$,LoadIndex$$) THEN 
        'Datensatz ex. noch nicht ==> neu erzeugen
        BLANK FILE LoadFile$
        IF CopyRecord%(datei$,LoadFile$) <> - 1 THEN 
            GOTO WriteToLoadError
        END IF 
        TStateField$$ = "1"'als nicht abgeglichen markieren
        STORE FILE LoadFile$
        UNLOCK CURRENT FILE LoadFile$
    ELSE 
        'Datensatz ex. ==> gegebenenfalls den ex. Datensatz Åberschreiben
        SELECT FIRST FILE LoadFile$ INDEX LoadIndex$$
        SELECT KEY code$ LOCK FILE LoadFile$ INDEX LoadIndex$$
        IF CopyRecord%(datei$,LoadFile$) <> - 1 THEN 
            GOTO WriteToLoadError
        END IF 
        TStateField$$ = "1"'als nicht abgeglichen markieren
        STORE FILE LoadFile$
        UNLOCK CURRENT FILE LoadFile$
    END IF 
    
    IF doUndirty% = - 1 THEN 
        '~~~~~~~~~~~~~~~~~~~~~ Protokoll nur fÅr CenterToLoadEx
        CALL AbgleichLog(",OK", - 1)
        '~~~~~~~~~~~~~~~~~~~~~     
    END IF 
  
    'alles io
    WriteToLoad% = - 1
    GOTO WriteToLoadEnde

WriteToLoadError: 
    IF jaDebug% = - 1 THEN CALL Fehler("Fehler in WriteToLoad: " + datei$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
    IF doUndirty% = - 1 THEN 
        '~~~~~~~~~~~~~~~~~~~~~ Protokoll nur fÅr CenterToLoadEx
        CALL AbgleichLog(",ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
        '~~~~~~~~~~~~~~~~~~~~~      
    END IF 
    GOTO WriteToLoadEnde

WriteToLoadEnde: 
    Superbase.ErrorTrapLabel = oldErrorLabel$
 END FUNCTION 
 '***********************************************************************************************     


 'Send-Routine
 '  - ruft fÅr alle Dateien vom "A" - Typ die Routine SendEx(...) auf
 '
SUB Send()
 
    oldErrorLabel$ = Superbase.ErrorTrapLabel
    ON ERROR GOTO SendError
    jaSendSucc% = - 1
    DIM w AS SDIWindow 
    SET w = Superbase.Windows(1)
 

    'Åber alle abzugleichenden Dateien: SendEx(...) aufrufen 
    SELECT FIRST FILE "AbgFiles" INDEX CodeFile.AbgFiles
    WHILE NOT EOF ("AbgFiles")
        
        ON ERROR GOTO SendNextError
        IF Typ.AbgFiles = "A" THEN 
 
            'Send-Variablen  
            fileName$ = FileName.AbgFiles
            sendFile$ = Prefix.AbgFiles + "Send"
            sendCode$ = CodeField.AbgFiles
 
            w.Form.TitleL.Caption = fileName$
            w.Form.CounterL.Caption = "0"
            w.Form.FktL.Caption = " "
            FORM 
 
            IF NOT OPEN (sendFile$) THEN 
                CALL DFile(2,"Abgleich\Send\" + sendFile$ + ";paris")
                ON ERROR GOTO SendNextError
            END IF 
            'Center-File wird in SendEx geîffnet (falls nîtig)
            CALL SendEx(fileName$,sendFile$,sendCode$)
 
        END IF 
        'alles io
        GOTO SendNext
SendNextError: 
    jaSendSucc% = 0
    '~~~~~~~~~~~~~~~~~~~~~
    CALL AbgleichLog(" ", - 1)
    CALL AbgleichLog("ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
    '~~~~~~~~~~~~~~~~~~~~~   
    GOTO SendNext 

SendNext: 
        ON ERROR GOTO SendError
        SELECT NEXT FILE "AbgFiles" INDEX CodeFile.AbgFiles
    WEND 
    'alles io
    GOTO SendEnde

SendError: 
    jaSendSucc% = 0
    IF jaDebug% = - 1 THEN CALL Fehler("Fehler in Send: " + datei$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
    '~~~~~~~~~~~~~~~~~~~~~
    CALL AbgleichLog(" ", - 1)
    CALL AbgleichLog("ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
    '~~~~~~~~~~~~~~~~~~~~~  
    GOTO SendEnde

SendEnde: 
 
    Superbase.ErrorTrapLabel = oldErrorLabel$
 END SUB 
 '***********************************************************************************************      
 
 
 'SendEx-Routine
 '  - nimmt den tatsÑchlichen Datenabgleich F --> Z  vor und leert das Send-File
 '  - Parameter:
 '      * centerFile$: PPCS-Ziel-Datei (Zentrale)
 '      * sendFile$: temp. Abgleichs-Datei (Prefix + "Send")
 '      * guidField$: Feld-Name des GUID
   
SUB SendEx(centerFile$,sendFile$,guidField$)

    oldErrorLabel$ = Superbase.ErrorTrapLabel
    IF jaDebug% = - 1 THEN CALL Fehler("SendEx()",centerFile$)
    ON ERROR GOTO SendExError 
 
    DIM w AS SDIWindow 
    SET w = Superbase.Windows(1)
    w.Form.FktL.Caption = "Daten senden ..."
    FORM 
    '~~~~~~~~~~~~~~~~~~~~~
    CALL AbgleichLog("", - 1)
    CALL AbgleichLog(sendFile$ + "-->" + centerFile$, - 1)
    '~~~~~~~~~~~~~~~~~~~~~  
    sendGUID$ = guidField$ + "." + sendFile$
    centerGUID$ = guidField$ + "." + centerFile$
    sendTState$ = "TState." + sendFile$
 
    'Send-Datei durchlaufen und die zugehîrigen DatensÑtze im Center-File
    'erzeugen bzw. neuerstellen  
    firstLoop% = - 1
    z% = 0
    recordSuccess% = - 1' wurden alle DatensÑtze erfolgreich bearbeitet?
    ON ERROR GOTO SendExError
    
    SELECT FIRST FILE sendFile$ INDEX sendGUID$$
    WHILE NOT EOF (sendFile$)
        
        IF firstLoop% = - 1 THEN 
            firstLoop% = 0
            IF OPEN (centerFile$) THEN 
               'Wenn offen ==> lokal oder Åber PPCS geîffnet ?
                IF IsOnline%(centerFile$) = 0 THEN 
                ' ==> also nicht Online ==> schlie·en und Åber PPCS îffnen 
                    CLOSE FILE centerFile$
                    w.Form.FktL."Datenbank îffnen ..."
                    FORM 
                    CALL DFile(30,centerFile$ + ";paris")
                    IF NOT OPEN (centerFile$) THEN GOTO SendExError
                    ON ERROR GOTO SendExError
                END IF 
            ELSE 
                w.Form.FktL.Caption = "Datenbank îffnen ..."
                FORM 
                CALL DFile(30,centerFile$ + ";paris")
                IF NOT OPEN (centerFile$) THEN GOTO SendExError
                ON ERROR GOTO SendExError
            END IF 
            w.Form.FktL.Caption = "Daten abgleichen ..."
        END IF 
       
        ON ERROR GOTO SendExAbglError 'Fehler-Erkennung Datensatzweise 
        IF EXISTS (sendGUID$$,centerGUID$$) THEN 
 
            'Datensatz existiert schon ==> Åberschreiben
            '~~~~~~~~~~~~~~~~~~~~~
            CALL AbgleichLog("OVERWRITE," + sendGUID$$,0)
            '~~~~~~~~~~~~~~~~~~~~~
 
            SELECT FIRST FILE centerFile$ INDEX centerGUID$$
            SELECT KEY sendGUID$$ FILE centerFile$ INDEX centerGUID$$
            SELECT CURRENT LOCK FILE centerFile$ INDEX centerGUID$$
            IF CopyRecord%(sendFile$,centerFile$) <> - 1 THEN GOTO SendExAbglError
            sendTState$$ = ""'als abgeglichen markieren
            
            STORE FILE centerFile$
            UNLOCK CURRENT FILE centerFile$
        ELSE 
  
            'Existiert noch nicht ==> sowieso ins Center-File stopfen
            '~~~~~~~~~~~~~~~~~~~~~
            CALL AbgleichLog("NEW," + sendGUID$$,0)
            '~~~~~~~~~~~~~~~~~~~~~
  
            BLANK FILE centerFile$
            IF CopyRecord%(sendFile$,centerFile$) <> - 1 THEN GOTO SendExAbglError 
            sendTState$$ = ""'als abgeglichen markieren
            STORE FILE centerFile$
        END IF 
        z% = z% + 1
        '~~~~~~~~~~~~~~~~~~~~~
        CALL AbgleichLog(",OK", - 1)
        '~~~~~~~~~~~~~~~~~~~~~ 
        'fÅr diesen Datensatz alles i.o.
        GOTO SendExAbglNext
 
SendExAbglError: 
        jaSendSucc% = 0
        recordSuccess% = 0
        IF jaDebug% = - 1 THEN CALL Fehler("Fehler in SendEx():" + sendFile, ERR$ ( ERRNO ))
        '~~~~~~~~~~~~~~~~~~~~~
        CALL AbgleichLog(",ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
        '~~~~~~~~~~~~~~~~~~~~~
        GOTO SendExAbglNext

SendExAbglNext: 
        ON ERROR GOTO SendExError
        w.Form.CounterL.Caption = STR$ (z%,"z")
        SELECT NEXT FILE sendFile$ INDEX sendGUID$$
    WEND 
    
 
    'Send-File (soweit mîglich) leeren
    IF recordSuccess% = - 1 THEN 
        'alles io ==> Send-File auf die harte (schnelle) Tour leeren
        REMOVE FROM FILE sendFile$
    ELSE 
        'Problem aufgetreten ==> nur die DatensÑtze lîschen, die abgeglichen wurden
        SELECT FIRST FILE sendFile$ INDEX sendGUID$$
        WHILE NOT EOF (sendFile$)
 
            IF sendTState$$ = "" THEN 
                SELECT CURRENT LOCK FILE sendFile$ INDEX sendGUID$$
                SELECT REMOVE FILE sendFile$
            ELSE 
                SELECT NEXT FILE sendFile$ INDEX sendGUID$$
            END IF 
 
        WEND 
  
    END IF 
    'alles io
    GOTO SendExEnde

SendExError: 
    jaSendSucc% = 0
    IF jaDebug% = - 1 THEN CALL Fehler("Fehler in SendEx: " + datei$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
    '~~~~~~~~~~~~~~~~~~~~~
    CALL AbgleichLog(" ", - 1)
    CALL AbgleichLog("ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
    '~~~~~~~~~~~~~~~~~~~~~ 
    GOTO SendExEnde

SendExEnde: 
 
    Superbase.ErrorTrapLabel = oldErrorLabel$
 END SUB 
 '***********************************************************************************************     

  
SUB CenterToLoad()
 'protokolliert Daten, die fÅr eine Filiale durch zentrale Mitarbeiter geÑndert wurden
 'diese geÑnderten/neuen Daten werden in die LoadFiles geschrieben und wie Daten behandelt, 
 'die vom Filial-Mitarbeter selbst online geÑndert wurden
 '==> den Daten in den LoadFiles sieht man nicht an, ob sie von einem zentralen oder filialen-Mitarbeiter
 'erzeugt wurden  
 '
 ' Insgesamt fÅr alle Dateien (max.) 2 Teil-AblÑufe
 '      a) CenterToLoadEx (dort erfolgt Verzweigung in Typ "Z" oder Typ "A")
 '      b) LoadToLocal: nur fÅr Typ "A"
 '
 'Vorgang Bsp. Adressen
 '  - das zustÑndige Rec-Feld auf Dirty-Zustand prÅfen und gegebenenfalls den 
 '    Datensatz in die AdrLoad kopieren

    IF jaDebug% = - 1 THEN CALL Fehler("CenterToLoad()","")
    oldErrorLabel$ = Superbase.ErrorTrapLabel
    ON ERROR GOTO CTLError
    
    jaCTLSucc% = - 1
    DIM w AS SDIWindow 
    SET w = Superbase.Windows(1)
    w.Form.TitleL.Caption = " "
    w.Form.CounterL.Caption = "0"
    w.Form.FktL.Caption = " "
    FORM 
    SELECT FIRST FILE "AbgFiles" INDEX CodeFile.AbgFiles
    WHILE NOT EOF ("AbgFiles")
    
        ON ERROR GOTO CTLNextError 
        IF (Typ.AbgFiles = "A") OR (Typ.AbgFiles = "Z") OR (Typ.AbgFiles = "C") OR (Typ.AbgFiles = "Y") THEN 
            filename$ = FileName.AbgFiles
            w.Form.TitleL.Caption = filename$
            w.Form.CounterL.Caption = "0"
            FORM 
            path$ = Dir.AbgFiles + "\"
            typ$ = Typ.AbgFiles
            code$ = CodeField.AbgFiles

            IF CenterToLoadEx%(filename$,path$,typ$,code$) <> - 1 THEN 
                jaCTLSucc% = 0
            END IF 

        END IF 'ende wenn Typ = A, Z, C, Y

        'alles io
        GOTO CTLNext

CTLNextError: 
        jaCTLSucc% = 0'Fehler registrieren
        IF jaDebug% = - 1 THEN CALL Fehler("Fehler in CenterToLoad: " + datei$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
        '~~~~~~~~~~~~~~~~~~~~~
        CALL AbgleichLog("", - 1)'neue Zeile 
        CALL AbgleichLog("ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
        '~~~~~~~~~~~~~~~~~~~~~
        GOTO CTLNext
CTLNext: 
        ON ERROR GOTO CTLError
        SELECT NEXT FILE "AbgFiles" INDEX CodeFile.AbgFiles
    WEND 
    'alles io
    GOTO CTLEnde

CTLError: 
    jaCTLSucc% = 0
    IF jaDebug% = - 1 THEN CALL Fehler("Fehler in CenterToLoad: " + datei$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
    '~~~~~~~~~~~~~~~~~~~~~
    CALL AbgleichLog("", - 1)'neue Zeile 
    CALL AbgleichLog("ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
    '~~~~~~~~~~~~~~~~~~~~~
 
    GOTO CTLEnde

CTLEnde: 

 Superbase.ErrorTrapLabel = oldErrorLabel$

 END SUB 
 '*********************************************************************************************** 


FUNCTION CenterToLoadEx%(datei$,path$,typ$,code$)
 '- Startet Kopier-Vorgang aller geÑnderten/neuen DatensÑtze von einer 
 '  Center- zur passenden Load-Datei 
 '- ...Datensatz-weise 
 '- Aufruf von WriteToLoad%() und CenterToLoad() aus
 '- nur die DatensÑtze sichtbarer Workstations werden behandelt
 '- Aufruf mit typ$ = "Z" nur von CenterToLoad() aus 
 '- Aufruf von WriteToLoad%() nur mit typ$ = "A"
    
    IF jaDebug% = - 1 THEN CALL Fehler("CenterToLoadEx: " + datei$,"")
    oldErrorLabel$ = Superbase.ErrorTrapLabel
    ON ERROR GOTO CTLExError
    
    CenterToLoadEx% = 0
    datei$ = UCASE$ (datei$)
    DIM w AS SDIWindow
    SET w = Superbase.Windows(1)
    z% = 0
    
    CALL GetFileInfo(datei$)'wird von WriteToLoad benîtigt

    '~~~~~~~~~~~~~~~~~~~~~ 
    CALL AbgleichLog("", - 1)
    CALL AbgleichLog(datei$ + "-->" + jaFilePrefix$ + "Load", - 1)
    '~~~~~~~~~~~~~~~~~~~~~   
       
    recfield$ = jaRecField$ + "." + datei$

    SELECT CASE typ$
 
        CASE "Z"
 
            IF OPEN ("temp") THEN CLOSE FILE "temp"'sis
            dirty$ = "rec0." + datei$
 
            'Datei lokal îffnen
            IF OPEN (datei$) THEN 
                'Wenn offen ==> lokal oder Åber PPCS geîffnet ?
                IF IsOnline%(datei$) = - 1 THEN 
                    ' ==> also Online ==> schlie·en und lokal îffnen 
                    CLOSE FILE datei$
                    CALL DFile(2,path$ + datei$ + ";paris")
                    IF NOT OPEN (datei$) THEN GOTO CTLExError
                    ON ERROR GOTO CTLExError
                END IF 
            ELSE 
                CALL DFile(2,path$ + datei$ + ";paris")
                IF NOT OPEN (datei$) THEN GOTO CTLExError
            END IF 
         
            'lokale Datei komplett als Memory-File kopieren und schlie·en
            w.Form.FktL.Caption = "Vorbereiten der DatenÅbernahme ..."
            FORM 
            CREATE FILE MEMORY "temp" FROM FILE datei$
            CLOSE FILE datei$
        
            'die Zentrale Datei wieder îffnen
            w.Form.FktL.Caption = "Datenbank îffnen ..."
            FORM 
            CALL DFile(20,datei$ + ";paris")
            IF NOT OPEN (datei$) THEN GOTO CTLExError
            ON ERROR GOTO CTLExError
            
            w.Form.FktL.Caption = "Daten Åbernehmen ..."
            FORM 

            tempcode$ = code$ + ".temp"
            code$ = code$ + "." + datei$
            wks$ = "Workstation." + datei$
            tempdirty$ = "rec0.temp"
                    
            'Åber alle zentralen DatensÑtze
            SELECT FIRST FILE datei$ INDEX code$$
            WHILE NOT EOF (datei$)
                ON ERROR GOTO CTLExNextErr1
                a$ = code$$
                copyrecord% = - 1'initial: der Datensatz existiert noch nicht
                IF EXISTS (code$$,tempcode$$) THEN 
                    
                    SELECT KEY code$$ FILE "temp" INDEX tempcode$$
                    'Datensatz existiert doch schon ==> unverÑndert seit letztem Abgleich?
                    IF tempdirty$$ >= dirty$$ THEN 
                        copyrecord% = 0
                    END IF 
                END IF 
 
                IF copyrecord% = - 1 THEN 

                    
                    IF WriteToLoad%(datei$, - 1) <> - 1 THEN ' "-1": Un-Dirty in WriteToLoad() vornehmen                       
                        GOTO CTLExNextErr1 
                    END IF 

                    z% = z% + 1
                    w.Form.CounterL.Caption = STR$ (z%,"z") + " "
                    FORM 
                END IF 
                'alles io
                GOTO CTLExNext1
CTLExNextErr1: 
                IF jaDebug% = - 1 THEN CALL Fehler("Fehler in CenterToLoadEx: " + datei$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
                'Error-Log wird von WriteToLoad geschrieben
                jaCTLSucc% = 0
                GOTO CTLExNext1 
CTLExNext1: 
                ON ERROR GOTO CTLExError
                SELECT NEXT FILE datei$ INDEX code$$
            WEND 

            CLOSE FILE "temp"

        CASE "C","A","Y"
    
            code$ = code$ + "." + datei$
            IF OPEN (datei$) THEN 
                'Wenn offen ==> lokal oder Åber PPCS geîffnet ?
                IF IsOnline%(datei$) = 0 THEN 
                    ' ==> also nicht Online ==> schlie·en und Åber PPCS îffnen 
                    CLOSE FILE datei$
                    w.Form.FktL.Caption = "Datenbank îffnen ..."
                    FORM 
                    CALL DFile(20,path$ + datei$ + ";paris")
                    IF NOT OPEN (datei$) THEN GOTO CTLExError
                    ON ERROR GOTO CTLExError
                END IF 
            ELSE 
                w.Form.FktL.Caption = "Datenbank îffnen ..."
                FORM 
                CALL DFile(20,path$ + datei$ + ";paris")
                IF NOT OPEN (datei$) THEN GOTO CTLExError
                ON ERROR GOTO CTLExError
            END IF 
            
            ifrom% = 0' von Wks
            ito% = VisCount% - 1' bis Wks ... also erstmal fÅr alle sichbaren Filialen

            IF typ$ <> "A" OR jaLoadSubOff% = 0 THEN 
               'nur die eigenen Daten laden ==> welchen Index hat das aktuelle BÅro?
                ifrom% = GetVisWksIndex%(Workstation%)
                ito% = ifrom%
                IF ifrom% = - 1 THEN 
                    ito% = - 2
                    IF jaDebug% = - 1 THEN CALL Fehler("Wks-Index nicht gefunden:","Workstation = " + STR$ (Workstation%,"z))
                END IF 
            END IF 


            'array mit GUID's holen, die abgeglichen werden mÅssen
            DIM guid$(0)
            guidCount% = 0
            FOR i% = ifrom% TO ito%
                wks% = VisOff%(i%)'sichbares BÅro = énderungs-STATUS dieses BÅros                
                w.Form.TitleL.Caption = w.Form.TitleL.Caption + " (" + VisNames$(i%) + ")"
                FORM 
                'hat BÅro wks% oder Zentrale in den Daten von wks% etwas geÑndert?
                ON ERROR GOTO CTLExError
                SELECT FIRST FILE datei$ INDEX recfield$$
                SELECT KEY wks% FILE datei$ INDEX recfield$$
                WHILE NOT EOF (datei$) AND recfield$$ = wks%
                                          
                    guidCount% = guidCount% + 1
                    REDIM guid$(guidCount%)
                    guid$(guidCount% - 1) = code$$
 
                    SELECT NEXT FILE datei$ INDEX recfield$$'den Mi·lungenen Åberspringen                     
                WEND 
 
            NEXT i%'nÑchstes sichtbares BÅro  

            guidNo% = 0
            FOR guidNo% = 0 TO guidCount%

                SELECT FIRST FILE datei$ INDEX code$$
                SELECT KEY guid$(guidNo%) FILE datei$ INDEX code$$
                IF FOUND (datei$) THEN 
                    
                    IF WriteToLoad%(datei$, - 1) <> - 1 THEN ' "-1": Un-Dirty in WriteToLoad() vornehmen
                        GOTO CTLExNextErr2
                    END IF 
 
                ELSE 
                    GOTO CTLExNextErr2 
                END IF 
                
                z% = z% + 1
                w.Form.CounterL.Caption = STR$ (z%,"z") + " "
                FORM 
                'alles io
                GOTO CTLExNext2

CTLExNextErr2: 
                IF jaDebug% = - 1 THEN CALL Fehler("Fehler in CenterToLoadEx: " + datei$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
                'Error-Log wird von WriteToLoad geschrieben
                jaCTLSucc% = 0
                GOTO CTLExNext2
 
CTLExNext2:                     
                    
                ON ERROR GOTO CTLExError 

            NEXT guidNo%
 
   END SELECT 

    'alles io
    CenterToLoadEx% = - 1
    GOTO CTLExEnde

CTLExError: 
    IF jaDebug% = - 1 THEN CALL Fehler("Fehler in CenterToLoadEx: " + datei$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
    CALL AbgleichLog("", - 1)'neue Zeile 
    CALL AbgleichLog("ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
    jaCTLSucc% = 0
    GOTO CTLExEnde

CTLExEnde:     
    Superbase.ErrorTrapLabel = oldErrorLabel$

 END FUNCTION 
 '***********************************************************************************************   
 

SUB LoadToLocal()
 'ruft LoadToLocalEx(..) fÅr alle abzugleichenden Dateien auf     
    IF jaDebug% = - 1 THEN CALL Fehler("LoadToLocal()","")
    oldErrorLabel$ = Superbase.ErrorTrapLabel
    ON ERROR GOTO ErrorHandler
 
    jaLTLSucc% = - 1
    DIM w AS SDIWindow 
    SET w = Superbase.Windows(1)
    w.Form.FktL.Caption = "Zentrale Daten speichern ..."
    FORM 
 
    SELECT FIRST FILE "AbgFiles" INDEX CodeFile.AbgFiles
   
    WHILE NOT EOF ("AbgFiles")
    
        IF (Typ.AbgFiles = "A") OR (Typ.AbgFiles = "C") OR (Typ.AbgFiles = "Z") THEN 
            localfile$ = FileName.AbgFiles
            loadfile$ = Prefix.AbgFiles + "Load"
            ind$ = CodeField.AbgFiles
            path$ = Dir.AbgFiles + "\"
            w.Form.TitleL.Caption = localfile$
            w.Form.CounterL.Caption = "0"
            FORM 
            IF LoadToLocalEx%(loadfile$,localfile$,ind$,path$) <> - 1 THEN i% = 1
        END IF 

        SELECT NEXT FILE "AbgFiles" INDEX CodeFile.AbgFiles
    WEND 
 END SUB 
 '***********************************************************************************************    
 

FUNCTION LoadToLocalEx%(LoadFile$,LocalFile$,ind$,path$)
 'Laden der Daten, die durch BÅro-User online hinzugefÅgt/verÑndert wurden 
 'bzw. der Daten, die durch einen zentralen Mitarbeiter in die Zentrale eingefÅgt und durch
 'einen Aufruf von LoadCenterEx() durch den filialen Mitarbeiter in die LoadFiles kopiert wurden
 '==> Load-files enthalten ausschlie·lich zentrale ID's
 '==> beim Load nur prÅfen, ob die Load-files Daten enthalten und wenn, 
 '    dann nur an der Frage orientieren, ob die ID's dieser DatensÑtze bereits 
 '    in den lokalen files vorhanden sind - Ñhnlich wie in WriteToLoad
 '
 '   Aufruf durch LoadFiles%() 

 '   - glcLocal1$ und glcLocal2$ zweckentfremden, um erfolgten Abgleich zu markieren
    oldErrorLabel$ = Superbase.ErrorTrapLabel
    ON ERROR GOTO LTLExError
    IF jaDebug% = - 1 THEN CALL Fehler("LoadToLocalEx: " + LoadFile$ + " --> " + LocalFile$,"")

    LoadToLocalEx% = 0
    DIM w AS SDIWindow 
    SET w = Superbase.Windows(1)
        
    '~~~~~~~~~~~~~~~~~~~~~ 
    CALL AbgleichLog("", - 1)
    CALL AbgleichLog(LoadFile$ + "-->" + LocalFile$, - 1)
    '~~~~~~~~~~~~~~~~~~~~~  

    IF NOT OPEN (LoadFile$) THEN 
        CALL DFile(2,"ABGLEICH\Load\" + LoadFile$ + ";paris")
        IF NOT OPEN (LoadFile$) THEN GOTO LTLExError
        ON ERROR GOTO LTLExError
    END IF 
    
    IF OPEN (LocalFile$) THEN 
        IF IsOnline%(LocalFile$) = - 1 THEN 
            CLOSE FILE LocalFile$'die zentrale Tabelle schie·en..
            CALL DFile(2,path$ + LocalFile$ + ";paris")
            IF NOT OPEN (LocalFile$) THEN GOTO LTLExError 
        END IF 
    ELSE 
        CALL DFile(2,path$ + LocalFile$ + ";paris")
        IF NOT OPEN (LocalFile$) THEN GOTO LTLExError 
    END IF 
    ON ERROR GOTO LTLExError
    
    LoadIndex$ = ind$ + "." + LoadFile$'der Code-Index in *Load.sbf
    LocalIndex$ = ind$ + "." + LocalFile$'der Code-Index der lokalen sbf - z.B. "CodeKu.Adressen"
    LoadTState$ = "TState." + LoadFile$'TState der LoadFiles - z.B. "TState.AdrLoad"
 
    z% = 0
    recordSuccess% = - 1
    w.Form.FktL.Caption = "Daten Åbernehmen ..."
    FORM 
    SELECT FIRST FILE LoadFile$ INDEX LoadIndex$$
    WHILE NOT EOF (LoadFile$)
        ON ERROR GOTO LTLExError2
        
        code$ = LoadIndex$$'die Code des zu kopierenden Datensatzes im Load-file 
        IF NOT EXISTS (code$,LocalIndex$$) THEN 
            'Datensatz ex. noch nicht ==> neu erzeugen
            BLANK FILE LocalFile$
            IF CopyRecord%(LoadFile$,LocalFile$) <> - 1 THEN GOTO LTLExError2 
            LoadTState$$ = ""'als abgeglichen markieren
            STORE FILE LocalFile$
            '~~~~~~~~~~~~~~~~~~~~~
            CALL AbgleichLog("", - 1)
            CALL AbgleichLog("NEW," + code$,0)
            '~~~~~~~~~~~~~~~~~~~~~    
         ELSE 
            'Datensatz ex. ==> Daten Åberschreiben
            SELECT FIRST FILE LocalFile$ INDEX LocalIndex$$
            SELECT KEY code$ LOCK FILE LocalFile$ INDEX LocalIndex$$
            IF CopyRecord%(LoadFile$,LocalFile$) <> - 1 THEN GOTO LTLExError2
            LoadTState$$ = ""'als abgeglichen markieren
            STORE FILE LocalFile$
            UNLOCK CURRENT FILE LocalFile$
            '~~~~~~~~~~~~~~~~~~~~~
            CALL AbgleichLog("", - 1)
            CALL AbgleichLog("OVERWRITE," + code$,0)
            '~~~~~~~~~~~~~~~~~~~~~     
        END IF 
        'alles io
        '~~~~~~~~~~~~~~~~~~~~~
        CALL AbgleichLog(",OK", - 1)
        '~~~~~~~~~~~~~~~~~~~~~        
        GOTO LTLExNext

LTLExError2: 
        IF jaDebug% = - 1 THEN CALL Fehler("Fehler in LoadToLocalEx", STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
        recordSuccess% = 0
        jaLTLSucc% = 0
        '~~~~~~~~~~~~~~~~~~~~~
        CALL AbgleichLog(",ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
        '~~~~~~~~~~~~~~~~~~~~~          
        GOTO LTLExNext

LTLExNext: 
        z% = z% + 1
        w.Form.CounterL.Caption = STR$ (z%,"z") + " "
        FORM 
        ON ERROR GOTO LTLExError 
        SELECT NEXT FILE LoadFile$ INDEX LoadIndex$$
    WEND 

     
    'Load-File (soweit mîglich) leeren    
    IF recordSuccess% = - 1 THEN 
        'alles io ==> Send-File auf die harte (schnelle) Tour leeren
        REMOVE FROM FILE LoadFile$
    ELSE 
        'Problem aufgetreten ==> nur die DatensÑtze lîschen, die abgeglichen wurden
        SELECT FIRST FILE LoadFile$ INDEX LoadIndex$$
        WHILE NOT EOF (LoadFile$)
 
            IF LoadTState$$ = "" THEN 
                SELECT CURRENT LOCK FILE LoadFile$ INDEX LoadIndex$$
                SELECT REMOVE FILE LoadFile$
            ELSE 
                SELECT NEXT FILE LoadFile$ INDEX LoadIndex$$
            END IF 
 
        WEND 
    END IF 
 
    'alles io
    LoadToLocalEx% = - 1
    GOTO LTLExEnde

LTLExError: 
    jaLTLSucc% = 0
    IF jaDebug% = - 1 THEN CALL Fehler("Fehler beim Lîschen der Load-DatensÑtze: " + LoadFile$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
     '~~~~~~~~~~~~~~~~~~~~~
    CALL AbgleichLog(" ", - 1)
    CALL AbgleichLog("ERROR," + STR$ ( ERRNO ,"z") + "," + ERR$ ( ERRNO ), - 1)
    '~~~~~~~~~~~~~~~~~~~~~  
    GOTO LTLExEnde

LTLExEnde: 
 
    Superbase.ErrorTrapLabel = oldErrorLabel$
 END FUNCTION 
 '***********************************************************************************************     


SUB CAbgleichLog(extension$)
 'Erzeugt ein Logfile mit einer bestimmten Erweiterung, die durch den Typ der Funktion bestimmt ist, 
 
    logfile$ = TIME$ (Superbase.Today,"yymmdd")
    i% = 1
    WHILE EXISTS (_remotepath$ + "Abgleich\Log\" + logfile$ + STR$ (i%,"00") + "." + extension$)
        i% = i% + 1
    WEND 
    logfile$ = _remotepath$ + "Abgleich\Log\" + logfile$ + STR$ (i%,"00") + "." + extension$
    OPEN logfile$ FOR OUTPUT 
    CLOSE OUTPUT 
    jaLogFile$ = logfile$
 END SUB 
 '***********************************************************************************************     
 

SUB AbgleichLog(logtext$,crlf%)

    oldErrorLabel$ = Superbase.ErrorTrapLabel
    ON ERROR GOTO LogError
    'ex. dasLogfile ? 
    IF NOT EXISTS (jaLogFile$) THEN 
        IF jaDebug% = - 1 THEN 
            CALL Fehler ("Log-File existiert nicht: " + jaLogFile$, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
        END IF 
        GOTO LogEnde 
    END IF 
    OPEN jaLogFile$ FOR APPEND 
    IF crlf% = - 1 THEN 
        ? logtext$
    ELSE 
        ? logtext$;
    END IF 
    CLOSE OUTPUT 
    'alles io
    GOTO LogEnde

LogError:    
    IF jaDebug% = - 1 THEN CALL Fehler("Fehler beim Schreiben des Logfiles: " + jaLogFile, STR$ ( ERRNO ,"z") + ": " + ERR$ ( ERRNO ))
    GOTO LogEnde

LogEnde: 
    Superbase.ErrorTrapLabel = oldErrorLabel$
 END SUB 

